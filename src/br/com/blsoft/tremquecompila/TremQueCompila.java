/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package br.com.blsoft.tremquecompila;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStream;
import java.util.Scanner;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;

/**
 *
 * @author leand
 */
public class TremQueCompila extends javax.swing.JFrame {

    String texto = "";
    private boolean temAlteracao = false;
    //nome do arquivo sem a extensão
    String nomeArquivo = "";
    //nome com a extensão
    String nomeCompletoArquivo = "";
    //caminho completo da pasta de arquivos
    static String caminhoDosArquivos = "./";

    /**
     * Creates new form TremQueCompila
     */
    public TremQueCompila() {
        initComponents();
        //setar titulo do frame
        setTitle("Nova Classe (não está salvo) - Trem Que Compila");
        //colocar o frame no centro da tela
        setLocationRelativeTo(null);
        //atualizr barra de status
        this.barraDeStatus();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jpPrincipal = new javax.swing.JPanel();
        jspEditor = new javax.swing.JScrollPane();
        jtaEditor = new javax.swing.JTextArea();
        jspConsole = new javax.swing.JScrollPane();
        jtaConsole = new javax.swing.JTextArea();
        jtfBarraDeFerramentas = new javax.swing.JTextField();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jmiNovo = new javax.swing.JMenuItem();
        jmiAbrir = new javax.swing.JMenuItem();
        jmiSalvar = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        jmiSair = new javax.swing.JMenuItem();
        jmiLimparConsole = new javax.swing.JMenu();
        jmiCopiar = new javax.swing.JMenuItem();
        jmiColar = new javax.swing.JMenuItem();
        jmiLimpar = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        jmiCompilar = new javax.swing.JMenuItem();
        jmiExecutar = new javax.swing.JMenuItem();
        jmiCompilarExecutar = new javax.swing.JMenuItem();
        jMenu3 = new javax.swing.JMenu();
        jmiSobre = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        jspEditor.setBorder(javax.swing.BorderFactory.createTitledBorder("Editor de código fonte"));

        jtaEditor.setColumns(20);
        jtaEditor.setFont(new java.awt.Font("Lucida Console", 0, 14)); // NOI18N
        jtaEditor.setRows(5);
        jtaEditor.setText("/**\n *\n * @author leand\n */\n\npublic class Imprimir {\n\n    /**\n     * @param args the command line arguments\n     */\n    public static void main(String[] args) {\n        // TODO code application logic here\n        System.out.println(\"Meu primeiro programa java\");\n    }\n    \n}");
        jtaEditor.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jtaEditorKeyReleased(evt);
            }
        });
        jspEditor.setViewportView(jtaEditor);

        jspConsole.setBorder(javax.swing.BorderFactory.createTitledBorder("Console"));

        jtaConsole.setBackground(new java.awt.Color(51, 51, 51));
        jtaConsole.setColumns(20);
        jtaConsole.setFont(new java.awt.Font("Lucida Console", 0, 14)); // NOI18N
        jtaConsole.setForeground(new java.awt.Color(255, 255, 255));
        jtaConsole.setLineWrap(true);
        jtaConsole.setRows(5);
        jspConsole.setViewportView(jtaConsole);

        javax.swing.GroupLayout jpPrincipalLayout = new javax.swing.GroupLayout(jpPrincipal);
        jpPrincipal.setLayout(jpPrincipalLayout);
        jpPrincipalLayout.setHorizontalGroup(
            jpPrincipalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpPrincipalLayout.createSequentialGroup()
                .addComponent(jspEditor, javax.swing.GroupLayout.DEFAULT_SIZE, 514, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jspConsole, javax.swing.GroupLayout.PREFERRED_SIZE, 371, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        jpPrincipalLayout.setVerticalGroup(
            jpPrincipalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jspConsole, javax.swing.GroupLayout.DEFAULT_SIZE, 543, Short.MAX_VALUE)
            .addComponent(jspEditor)
        );

        jtfBarraDeFerramentas.setEditable(false);
        jtfBarraDeFerramentas.setBackground(new java.awt.Color(204, 204, 204));

        jMenu1.setIcon(new javax.swing.ImageIcon("resources/program-32.png"));
        jMenu1.setText("Arquivo");

        jmiNovo.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        jmiNovo.setIcon(new javax.swing.ImageIcon("resources/novo-22.png"));
        jmiNovo.setText("Novo");
        jmiNovo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmiNovoActionPerformed(evt);
            }
        });
        jMenu1.add(jmiNovo);

        jmiAbrir.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        jmiAbrir.setIcon(new javax.swing.ImageIcon("resources/abrir-22.png"));
        jmiAbrir.setText("Abrir");
        jmiAbrir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmiAbrirActionPerformed(evt);
            }
        });
        jMenu1.add(jmiAbrir);

        jmiSalvar.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        jmiSalvar.setIcon(new javax.swing.ImageIcon("resources/salvar-22.png"));
        jmiSalvar.setText("Salvar");
        jmiSalvar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmiSalvarActionPerformed(evt);
            }
        });
        jMenu1.add(jmiSalvar);
        jMenu1.add(jSeparator1);

        jmiSair.setIcon(new javax.swing.ImageIcon("resources/sair-22.png"));
        jmiSair.setText("Sair");
        jmiSair.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmiSairActionPerformed(evt);
            }
        });
        jMenu1.add(jmiSair);

        jMenuBar1.add(jMenu1);

        jmiLimparConsole.setIcon(new javax.swing.ImageIcon("resources/edit-32.png"));
        jmiLimparConsole.setText("Editar");

        jmiCopiar.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_C, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        jmiCopiar.setIcon(new javax.swing.ImageIcon("resources/copiar-22.png"));
        jmiCopiar.setText("Copiar");
        jmiCopiar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmiCopiarActionPerformed(evt);
            }
        });
        jmiLimparConsole.add(jmiCopiar);

        jmiColar.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_V, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        jmiColar.setIcon(new javax.swing.ImageIcon("resources/colar-22.png"));
        jmiColar.setText("Colar");
        jmiLimparConsole.add(jmiColar);

        jmiLimpar.setIcon(new javax.swing.ImageIcon("resources/limpar-22.png"));
        jmiLimpar.setText("Limpar console");
        jmiLimpar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmiLimparActionPerformed(evt);
            }
        });
        jmiLimparConsole.add(jmiLimpar);

        jMenuBar1.add(jmiLimparConsole);

        jMenu2.setIcon(new javax.swing.ImageIcon("resources/play-32.png"));
        jMenu2.setText("Executar");

        jmiCompilar.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F6, 0));
        jmiCompilar.setIcon(new javax.swing.ImageIcon("resources/martelo-22.png"));
        jmiCompilar.setText("Compilar");
        jmiCompilar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmiCompilarActionPerformed(evt);
            }
        });
        jMenu2.add(jmiCompilar);

        jmiExecutar.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F7, 0));
        jmiExecutar.setIcon(new javax.swing.ImageIcon("resources/play-22.png"));
        jmiExecutar.setText("Executar");
        jmiExecutar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmiExecutarActionPerformed(evt);
            }
        });
        jMenu2.add(jmiExecutar);

        jmiCompilarExecutar.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F8, 0));
        jmiCompilarExecutar.setIcon(new javax.swing.ImageIcon("resources/codigo-22.png"));
        jmiCompilarExecutar.setText("Compilar e Executar");
        jmiCompilarExecutar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmiCompilarExecutarActionPerformed(evt);
            }
        });
        jMenu2.add(jmiCompilarExecutar);

        jMenuBar1.add(jMenu2);

        jMenu3.setText("Ajuda");

        jmiSobre.setText("Sobre o software");
        jmiSobre.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmiSobreActionPerformed(evt);
            }
        });
        jMenu3.add(jmiSobre);

        jMenuBar1.add(jMenu3);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jpPrincipal, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jtfBarraDeFerramentas)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jpPrincipal, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jtfBarraDeFerramentas, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jmiCompilarExecutarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmiCompilarExecutarActionPerformed
        // verifica se o arquivo .java foi salvo
        if (verificarSeArquivoJavaFoiSalvo()) {
            //gera o .class
            this.compilarGerarPontoClass();
            //executa o .class
            this.executarClasseCompilada();
        } else {
            JOptionPane.showMessageDialog(null, "Você deve salvar sua classe antes de compilar! \n "
                    + "Lembre-se de salvar o arquivo .java com o mesmo nome da sua classe.", "Atenção", JOptionPane.INFORMATION_MESSAGE);
            this.salvarFonteJava();
        }
    }//GEN-LAST:event_jmiCompilarExecutarActionPerformed

    private void jmiCompilarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmiCompilarActionPerformed
        // verifica se existe o arquivo .java antes de executar
        if (verificarSeArquivoJavaFoiSalvo()) {
            //gera o .class
            this.compilarGerarPontoClass();
        } else {
            JOptionPane.showMessageDialog(null, "Você deve salvar sua classe antes de compilar! \n "
                    + "Lembre-se de salvar o arquivo .java com o mesmo nome da sua classe.", "Atenção", JOptionPane.INFORMATION_MESSAGE);
            // não existe o .java salvo! chama o método de salvar
            this.salvarFonteJava();
        }
    }//GEN-LAST:event_jmiCompilarActionPerformed

    private void jmiCopiarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmiCopiarActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jmiCopiarActionPerformed

    private void jmiNovoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmiNovoActionPerformed
        // criar novo documento
        //setar o titulo do frame
        setTitle("Nova Classe (não está salvo) - Trem Que Compila");
        //limpar texto do editor
        jtaEditor.setText("");
        jtaConsole.setText("");
    }//GEN-LAST:event_jmiNovoActionPerformed

    private void jmiAbrirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmiAbrirActionPerformed
        // abrir arquivo .java
        this.carregarFonteJava();
    }//GEN-LAST:event_jmiAbrirActionPerformed

    private void jmiSalvarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmiSalvarActionPerformed
        // salvar código fonte .java
        this.salvarFonteJava();
    }//GEN-LAST:event_jmiSalvarActionPerformed

    private void jmiSairActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmiSairActionPerformed
        // sair do sistema
        this.sair();
    }//GEN-LAST:event_jmiSairActionPerformed

    private void jtaEditorKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jtaEditorKeyReleased
        //pegar quantidades de linhas e caracteres do editor
        this.barraDeStatus();
        //habilitar alterações
        temAlteracao = true;
    }//GEN-LAST:event_jtaEditorKeyReleased

    private void jmiExecutarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmiExecutarActionPerformed
        if (verificarSeArquivoJavaFoiSalvo()) {
            if (verificarSeArquivoClassFoiGerado()) {
                this.executarClasseCompilada();
            } else {
                JOptionPane.showMessageDialog(null, "Você deve compilar sua classe antes de executar!",
                        "Atenção", JOptionPane.INFORMATION_MESSAGE);
            }
        } else {
            JOptionPane.showMessageDialog(null, "Você deve salvar sua classe antes de executar! \n "
                    + "Lembre-se de salvar o arquivo .java com o mesmo nome da sua classe.", "Atenção",
                    JOptionPane.INFORMATION_MESSAGE);
            //salvar arquivo
            this.salvarFonteJava();
        }
    }//GEN-LAST:event_jmiExecutarActionPerformed

    private void jmiLimparActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmiLimparActionPerformed
        // limpar texto do console
        jtaConsole.setText("");
    }//GEN-LAST:event_jmiLimparActionPerformed

    private void jmiSobreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmiSobreActionPerformed
        // TODO add your handling code here:

    }//GEN-LAST:event_jmiSobreActionPerformed

    //alimenta barra de estatos do software
    private void barraDeStatus() {
        int tamanhoLetras = this.jtaEditor.getText().length();
        int linhas = this.jtaEditor.getLineCount();
        this.jtfBarraDeFerramentas.setText("Total de caracteres: " + tamanhoLetras
                + " Total de linhas: " + linhas);
    }

    // verifica se o arquivo .java foi salvo
    private boolean verificarSeArquivoJavaFoiSalvo() {
        File file = new File(nomeCompletoArquivo);
        File directory = new File(caminhoDosArquivos);

        if (file.isFile()) {
            return true;
        } else {
            return false;
        }
    }

    //verifica se foi compilado, gerado o arquivo .class
    private boolean verificarSeArquivoClassFoiGerado() {
        String nomeDaClass = nomeArquivo + ".class";
        File file = new File(nomeDaClass);
        File directory = new File(caminhoDosArquivos);

        if (file.isFile()) {
            return true;
        } else {
            return false;
        }
    }

    // ao abrir um arquivo java seta o código fonte no editor
    private void carregarFonteJava() {
        JFileChooser fileChooser = new JFileChooser("./");
        FileNameExtensionFilter filtro = new FileNameExtensionFilter("*.java", "java");
        fileChooser.setFileFilter(filtro);
        int state = fileChooser.showOpenDialog(this);
        //chama janela pra selecionar arquivo
        if (state == JFileChooser.APPROVE_OPTION) {
            //verifica o status
            File f = fileChooser.getSelectedFile();
            //paga o nome do arquivo completo com a extensão
            nomeCompletoArquivo = fileChooser.getSelectedFile().getName();
            //setar o nome do arquivo completo na variavel nomeArquivo
            nomeArquivo = nomeCompletoArquivo;
            //remover o .java da variavel nomeArquivo
            this.removePontoJavaDoNomeDoarquivo();
            //ler o arquivo para o controle de texto
            try {
                FileReader fr = new FileReader(f);
                //cria o FileReader com o file previamente selecionado
                String temp = ""; //String temporaria
                //Vai lendo um caractere por vez e concatenando em temp.
                //A função read retorna um inteiro pois pode vir -1 significando o fim do arquivo
                //E um char não permite negativos
                //a função read pode gerar IOException
                int i = fr.read();
                while (i != -1) {
                    temp += ((char) i);
                    i = fr.read();
                }
                //fecha arquivo
                fr.close();
                jtaEditor.setText(temp); //atribui temp ao controle
                //seta o novo titulo com o nome do arquivo
                setTitle(nomeCompletoArquivo + " - Trem Que Compila");
                //informa false pois o arquivo ainda não foi alterado
                temAlteracao = false;
            } catch (FileNotFoundException e) {
                //Não encontrou arquivo
                JOptionPane.showMessageDialog(null, "Arquivo não encontrado!", "Erro", JOptionPane.ERROR_MESSAGE);
                e.printStackTrace();
            } catch (IOException e) {
                //erro na leitura
                JOptionPane.showMessageDialog(null, "Erro na leitura do arquivo!", "Erro", JOptionPane.ERROR_MESSAGE);
                e.printStackTrace();
            }
        }
    }

    //função que salva
    private void salvarFonteJava() {
        JFileChooser fileChooser = new JFileChooser("./");
        FileNameExtensionFilter filtro = new FileNameExtensionFilter("*.java", "java");
        fileChooser.setFileFilter(filtro);

        int state = fileChooser.showSaveDialog(this);
        //Abre dialogo pra selecionar
        if (state == JFileChooser.APPROVE_OPTION) {
            //se selecionou pega o arquivo
            try {
                // pego o nome do arquivo e acresenta .java caso não tenha 
                nomeCompletoArquivo = fileChooser.getSelectedFile().getName();
                if (!nomeCompletoArquivo.endsWith(".java")) {
                    nomeCompletoArquivo += ".java";
                }
                //setar o nome do arquivo completo no nome do arquivo
                nomeArquivo = nomeCompletoArquivo;
                //remover o .java do nome do arquivo, agora temos a variavel nomeArquivo com o 
                //nome do arquivo sem a extensão e a variavel nomeCompletoArquivo com o nome do arquivo + a extensão
                this.removePontoJavaDoNomeDoarquivo();
                //salva o .java     
                FileWriter fw = new FileWriter(nomeCompletoArquivo);
                //pega o texto do TextArea e envia pra stream no arquivo
                //A função write escreve uma string para o arquivo
                fw.write(jtaEditor.getText());
                //fecha arquivo
                fw.close();
                //seta o novo titulo com o nome do arquivo
                setTitle(nomeCompletoArquivo + ".java - Trem Que Compila");
                //informa false pois o arquivo ainda não foi alterado
                temAlteracao = false;
            } catch (FileNotFoundException e) {
                //Não encontrou arquivo
                JOptionPane.showMessageDialog(null, "Arquivo não encontrado!", "Erro", JOptionPane.ERROR_MESSAGE);
                e.printStackTrace();
            } catch (IOException e) {
                //erro na leitura
                JOptionPane.showMessageDialog(null, "Erro na leitura do arquivo!", "Erro", JOptionPane.ERROR_MESSAGE);
                e.printStackTrace();
            }
        }
    }

    //remover a extensão .java do nome do arquivo, caso tenha
    private void removePontoJavaDoNomeDoarquivo() {
        if (nomeArquivo.endsWith(".java")) {
            //se tiver .javar sera removido
            String[] nomeList = nomeArquivo.split(".java");
            nomeArquivo = nomeList[0];
        }
    }

    private void executarClasseCompilada() {
        //verifica se tem o .java no nome do arquivo
        removePontoJavaDoNomeDoarquivo();
        //gera o .class
        try {
            Process exec = Runtime.getRuntime().exec("cmd /C java " + nomeArquivo);
            InputStream in = exec.getInputStream();
            Scanner scan = new Scanner(in);
            //resetar variavel
            texto = "";
            //setar o texto de retono no console
            if (scan.hasNext()) {
                while (scan.hasNext()) {
                    texto += scan.nextLine();
                }
                this.jtaConsole.setText(texto);
            } else {
                this.jtaConsole.setText("Atenção: O arquivo " + nomeArquivo + " não foi encontrado!");
            }
        } catch (IOException e) {
            JOptionPane.showMessageDialog(null, "Erro: " + e.getMessage(), "Erro", JOptionPane.ERROR_MESSAGE);
        }
    }

    //compila e gera o .class
    private void compilarGerarPontoClass() {
        try {
            //executa comando para gerar o .class
            Process exec = Runtime.getRuntime().exec("cmd /C javac " + nomeCompletoArquivo);
            InputStream in = exec.getInputStream();
            Scanner scan = new Scanner(in);
            while (scan.hasNext()) {
                System.out.println(scan.nextLine());
            }
            JOptionPane.showMessageDialog(rootPane, "Software compilado com sucesso!");
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Erro ao compilar o código!", "Erro", JOptionPane.ERROR_MESSAGE);
        }
    }

    //Na saida verifica se quer salvar
    private void sair() {
        if (temAlteracao) {
            int state = JOptionPane.showConfirmDialog(this,
                    "O Arquivo foi moficado! Deseja salva antes de sair?");
            if (state == JOptionPane.YES_OPTION) {
                this.salvarFonteJava();
            } else if (state == JOptionPane.CANCEL_OPTION) {
                return;
            }
        }
        System.exit(0); //Sae fora =)
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TremQueCompila.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TremQueCompila.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TremQueCompila.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TremQueCompila.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new TremQueCompila().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JMenuItem jmiAbrir;
    private javax.swing.JMenuItem jmiColar;
    private javax.swing.JMenuItem jmiCompilar;
    private javax.swing.JMenuItem jmiCompilarExecutar;
    private javax.swing.JMenuItem jmiCopiar;
    private javax.swing.JMenuItem jmiExecutar;
    private javax.swing.JMenuItem jmiLimpar;
    private javax.swing.JMenu jmiLimparConsole;
    private javax.swing.JMenuItem jmiNovo;
    private javax.swing.JMenuItem jmiSair;
    private javax.swing.JMenuItem jmiSalvar;
    private javax.swing.JMenuItem jmiSobre;
    private javax.swing.JPanel jpPrincipal;
    private javax.swing.JScrollPane jspConsole;
    private javax.swing.JScrollPane jspEditor;
    private javax.swing.JTextArea jtaConsole;
    private javax.swing.JTextArea jtaEditor;
    private javax.swing.JTextField jtfBarraDeFerramentas;
    // End of variables declaration//GEN-END:variables
}
